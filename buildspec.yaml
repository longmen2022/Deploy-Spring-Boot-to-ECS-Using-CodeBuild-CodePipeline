# Specifies the version of the CodeBuild buildspec file.
version: 0.2

phases:
  # Pre-build phase where setup steps are executed.
  pre_build:
    commands:
      # Cleans and compiles the Maven project to prepare dependencies and source.
      - mvn clean install
      # Logs a message to indicate the Amazon ECR login process.
      - echo Logging in to Amazon ECR...
      # Verifies the AWS CLI version to ensure it is correctly configured.
      - aws --version
      # Stores the Amazon ECR repository URI into a variable for reuse.
      - REPOSITORY_URI=471112503258.dkr.ecr.us-east-1.amazonaws.com/long-men
      # Logs in to Amazon ECR using the AWS CLI, retrieving the password and passing it to Docker.
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
      # Captures the first seven characters of the commit hash to create a unique identifier.
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      # Generates an image tag using the build ID to ensure uniqueness.
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')

  # Build phase where the Docker image is created and tagged.
  build:
    commands:
      # Logs the build start time for debugging and tracking purposes.
      - echo Build started on `date`
      # Logs a message indicating that the Docker image build has begun.
      - echo Building the Docker image...
      # Builds the Docker image and tags it with "latest".
      - docker build -t $REPOSITORY_URI:latest .
      # Tags the image with a unique identifier (IMAGE_TAG) for versioning.
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  # Post-build phase where the Docker image is pushed and metadata is generated.
  post_build:
    commands:
      # Logs the build completion time.
      - echo Build completed on `date`
      # Logs a message indicating that the Docker images are being pushed to the repository.
      - echo Pushing the Docker images...
      # Pushes the image tagged as "latest" to the ECR repository.
      - docker push $REPOSITORY_URI:latest
      # Pushes the image with the unique tag (IMAGE_TAG) to the ECR repository.
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      # Logs a message indicating the start of image definitions file creation.
      - echo Writing image definitions file...
      # Writes metadata (image name and URI) into an imagedefinitions.json file for deployment.
      - printf '[{"name":"course-service","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      # Logs a message indicating the start of container-related image definitions file creation.
      - echo Writing image definitions file...
      # Defines the container name and stores it in a variable.
      - DOCKER_CONTAINER_NAME=long-men
      # Writes metadata (container name and URI) into another imagedefinitions.json file.
      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      # Logs the container name for verification.
      - echo $DOCKER_CONTAINER_NAME
      # Logs the content of the imagedefinitions.json file for debugging.
      - echo printing imagedefinitions.json
      - cat imagedefinitions.json

# Specifies the artifacts to be collected after the build process is complete.
artifacts:
  files:
    # Includes the imagedefinitions.json file for deployment purposes.
    - imagedefinitions.json
    # Includes the JAR file generated by Maven for the application.
    - target/course-service.jar
